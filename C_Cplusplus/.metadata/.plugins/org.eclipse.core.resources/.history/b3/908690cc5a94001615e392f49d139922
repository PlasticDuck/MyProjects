/*
 * DrawSphere.cpp
 *
 *  Created on: Oct 17, 2016
 *      Author: nandi
 */

#include "DrawSphere.h"

DrawSphere::DrawSphere(int argc, const char**argv) {

	pls=new plstream();

	//Parse and process command line arguments
	//pls->parseopts(&argc,argv,PL_PARSE_FULL);
	//Initialize plplot

	// TODO Auto-generated constructor stub
	pls->parseopts(&argc,argv,PL_PARSE_FULL);
	pls->scolbg(255,255,255);
	pls->sdev("tk");
	pls->init();

	pls->scol0(0,0,0,0);

	PLFLT x[]={1.0,1.5},y[]={1.0,1.5};



}

DrawSphere::~DrawSphere() {
	// TODO Auto-generated destructor stub
}


void DrawSphere::drawSphere(){
	pls->env( -1., 1., -1., 1., 0, -2 );
	PLFLT    t, r, theta;
	pls->col0(0);

	//Sphere
	PLFLT    *px = new PLFLT[PERIMETERPTS];
	PLFLT    *py = new PLFLT[PERIMETERPTS];

	for(int i=0;i< PERIMETERPTS;i++){
	 t=(2*M_PI/(PERIMETERPTS-1))*(PLFLT)i;
	 px[i]=cos(t);
	 py[i]=sin(t);
	}
	pls->line(PERIMETERPTS,px,py);

	//Contour
	PLcGrid2 cgrid2;
	PLFLT    **z;
	PLFLT    *lev = new PLFLT[10];
	pls->Alloc2dGrid( &cgrid2.xg, RPTS, THETAPTS );
	pls->Alloc2dGrid( &cgrid2.yg, RPTS, THETAPTS );
	pls->Alloc2dGrid( &z, RPTS, THETAPTS );
	cgrid2.nx=RPTS;
	cgrid2.ny=THETAPTS;


	std::cout<<"HERE "<<PERIMETERPTS;

	delete px;delete py;
	pls->env( -1., 1., -1., 1., 0, -2 );
}

void DrawSphere::polar()
// polar contour plot example.
{
    int      i, j;
    PLFLT    *px = new PLFLT[PERIMETERPTS];
    PLFLT    *py = new PLFLT[PERIMETERPTS];
    PLcGrid2 cgrid2;
    PLFLT    **z;
    PLFLT    t, r, theta;
    PLFLT    *lev = new PLFLT[10];

    pls->Alloc2dGrid( &cgrid2.xg, RPTS, THETAPTS );
    pls->Alloc2dGrid( &cgrid2.yg, RPTS, THETAPTS );
    pls->Alloc2dGrid( &z, RPTS, THETAPTS );
    cgrid2.nx = RPTS;
    cgrid2.ny = THETAPTS;

 //   pls->env( -1., 1., -1., 1., 0, -2 );
    pls->col0( 1 );
//
//    // Perimeter
//    for ( i = 0; i < PERIMETERPTS; i++ )
//    {
//        t     = ( 2. * M_PI / ( PERIMETERPTS - 1 ) ) * (PLFLT) i;
//        px[i] = cos( t );
//        py[i] = sin( t );
//    }
//    pls->line( PERIMETERPTS, px, py );
//
//    // Create data to be contoured.
//
//    for ( i = 0; i < RPTS; i++ )
//    {
//        r = i / (PLFLT) ( RPTS - 1 );
//        for ( j = 0; j < THETAPTS; j++ )
//        {
//            theta           = ( 2. * M_PI / (PLFLT) ( THETAPTS - 1 ) ) * (PLFLT) j;
//            cgrid2.xg[i][j] = r * cos( theta );
//            cgrid2.yg[i][j] = r * sin( theta );
//            z[i][j]         = r;
//        }
//    }
//
//    for ( i = 0; i < 10; i++ )
//    {
//        lev[i] = 0.05 + 0.10 * (PLFLT) i;
//    }
//
//    pls->col0( 2 );
//    pls->cont( z, RPTS, THETAPTS, 1, RPTS, 1, THETAPTS, lev, 10,pltr2, (void *) &cgrid2 );
//    pls->col0( 1 );
//    pls->lab( "", "", "Polar Contour Plot" );
//
//    pls->Free2dGrid( cgrid2.xg, RPTS, THETAPTS );
//    pls->Free2dGrid( cgrid2.yg, RPTS, THETAPTS );
//    pls->Free2dGrid( z, RPTS, THETAPTS );
//
//    delete[] px;
//    delete[] py;
//    delete[] lev;
}
